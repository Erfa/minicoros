/// Copyright (C) 2022 Electronic Arts Inc.  All rights reserved.

#define USE_MINICOROS
//#define USE_CONTINUABLES

#define MIXED_TEST_1

#ifdef USE_CONTINUABLES
  #define CONTINUABLE_WITH_NO_EXCEPTIONS
  #define CONTINUABLE_WITH_CUSTOM_ERROR_TYPE int
  #include <continuable/continuable.hpp>

  #define SUCCESS cti::make_ready_continuable<int>(123)
  #define SUCCESS_EXPLICIT cti::make_continuable<int>([](cti::promise<int>&& p) {p.set_value(123); })
  #define THEN(val) .then((val))
  #define FORWARD_INT .then([](int&& value){return value; })
  #define FORWARD_INT_RETURN(val) .then([](int&& value){return (val); })
  #define FAIL .fail([](int&& failure) {return cti::rethrow(std::move(failure)); })
  #define WHEN_BOTH(a, b) ((a) && (b))

  cti::continuable<int> custom_success() {
    return SUCCESS_EXPLICIT;
  }
#elif defined(USE_MINICOROS)
  #include <minicoros/future.h>

  #define SUCCESS mc::make_successful_future<int>(123)
  #define SUCCESS_EXPLICIT mc::future<int>([](mc::promise<int>&& p) {p(123); })
  #define THEN(val) .then((val))
  #define FORWARD_INT .then([](int&& value) -> mc::result<int> {return value; })
  #define FORWARD_INT_RETURN(val) .then([](int&& value) -> mc::result<int> {return (val); })
  #define FAIL .fail([](int&& error_code) {return mc::failure(std::move(error_code)); })
  #define WHEN_BOTH(a, b) ((a) && (b))

  mc::future<int> custom_success() {
    return SUCCESS;
  }
#endif

#ifdef TEST1
int main() {
  SUCCESS
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  ;
}
#endif

#ifdef TEST1_1
int main() {
  SUCCESS
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  ;

  SUCCESS
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  ;
  
  SUCCESS
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  ;
  
  SUCCESS
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  ;
  
  SUCCESS
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  ;
  
  SUCCESS
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  ;
  
  SUCCESS
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  ;
  
  SUCCESS
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  ;
  
  SUCCESS
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  ;
}
#endif

#ifdef TEST2
int main() {
  SUCCESS
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  ;
}
#endif

#ifdef TEST3
int main() {
  SUCCESS
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  ;
}
#endif

#ifdef TEST3_1
int main() {
  SUCCESS
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  ;

  SUCCESS
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  ;
  
  SUCCESS
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  ;
  
  SUCCESS
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  ;
  
  SUCCESS
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  FORWARD_INT_RETURN(SUCCESS_EXPLICIT)
  ;
}
#endif

#ifdef TEST4
int main() {
  SUCCESS
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  ;
}
#endif

#ifdef TEST4_1
int main() {
  SUCCESS
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  ;

  SUCCESS
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  ;

  SUCCESS
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  ;

  SUCCESS
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  ;

  SUCCESS
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  ;

  SUCCESS
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  ;

  SUCCESS
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  ;
}
#endif

#ifdef TEST4_2
int main() {
  SUCCESS
  THEN(custom_success())
  THEN(custom_success())
  THEN(custom_success())
  THEN(custom_success())
  ;

  SUCCESS
  THEN(custom_success())
  THEN(custom_success())
  THEN(custom_success())
  THEN(custom_success())
  ;

  SUCCESS
  THEN(custom_success())
  THEN(custom_success())
  THEN(custom_success())
  THEN(custom_success())
  ;

  SUCCESS
  THEN(custom_success())
  THEN(custom_success())
  THEN(custom_success())
  THEN(custom_success())
  ;

  SUCCESS
  THEN(custom_success())
  THEN(custom_success())
  THEN(custom_success())
  THEN(custom_success())
  ;

  SUCCESS
  THEN(custom_success())
  THEN(custom_success())
  THEN(custom_success())
  THEN(custom_success())
  ;

  SUCCESS
  THEN(custom_success())
  THEN(custom_success())
  THEN(custom_success())
  THEN(custom_success())
  ;
}
#endif

#ifdef TEST5
int main() {
  SUCCESS
  FORWARD_INT
  FAIL
  FORWARD_INT
  FAIL
  FORWARD_INT
  FAIL
  FORWARD_INT
  FAIL
  FORWARD_INT
  FAIL
  FORWARD_INT
  FAIL
  FORWARD_INT
  FAIL
  FORWARD_INT
  FAIL
  FORWARD_INT
  FAIL
  FORWARD_INT
  FAIL
  FORWARD_INT
  FAIL
  FORWARD_INT
  FAIL
  FORWARD_INT
  FAIL
  FORWARD_INT
  FAIL
  ;
}
#endif

#ifdef MIXED_TEST
int main() {
  SUCCESS
  FAIL
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FAIL
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FAIL
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  FORWARD_INT
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  FORWARD_INT
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FAIL
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  THEN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FORWARD_INT_RETURN(SUCCESS)
  FAIL
  ;
}
#endif

#ifdef TEST6
int main() {
  WHEN_BOTH(
    WHEN_BOTH(SUCCESS, SUCCESS),
    WHEN_BOTH(
      WHEN_BOTH(SUCCESS, SUCCESS),
      SUCCESS
    )
  )
  ;

  WHEN_BOTH(
    WHEN_BOTH(SUCCESS, SUCCESS),
    WHEN_BOTH(
      WHEN_BOTH(SUCCESS, SUCCESS),
      SUCCESS
    )
  )
  ;

  WHEN_BOTH(
    WHEN_BOTH(SUCCESS, SUCCESS),
    WHEN_BOTH(
      WHEN_BOTH(SUCCESS, SUCCESS),
      SUCCESS
    )
  )
  ;

  WHEN_BOTH(
    WHEN_BOTH(SUCCESS, SUCCESS),
    WHEN_BOTH(
      WHEN_BOTH(SUCCESS, SUCCESS),
      SUCCESS
    )
  )
  ;

  WHEN_BOTH(
    WHEN_BOTH(SUCCESS, SUCCESS),
    WHEN_BOTH(
      WHEN_BOTH(SUCCESS, SUCCESS),
      SUCCESS
    )
  )
  ;

  WHEN_BOTH(
    WHEN_BOTH(SUCCESS, SUCCESS),
    WHEN_BOTH(
      WHEN_BOTH(SUCCESS, SUCCESS),
      SUCCESS
    )
  )
  ;

  WHEN_BOTH(
    WHEN_BOTH(SUCCESS, SUCCESS),
    WHEN_BOTH(
      WHEN_BOTH(SUCCESS, SUCCESS),
      SUCCESS
    )
  )
  ;

  WHEN_BOTH(
    WHEN_BOTH(SUCCESS, SUCCESS),
    WHEN_BOTH(
      WHEN_BOTH(SUCCESS, SUCCESS),
      SUCCESS
    )
  )
  ;
}
#endif

#ifdef MIXED_TEST_1
int main() {
  WHEN_BOTH(
    SUCCESS
    FORWARD_INT
    THEN(SUCCESS)
    FORWARD_INT_RETURN(SUCCESS),
    WHEN_BOTH(
      WHEN_BOTH(SUCCESS, SUCCESS),
      SUCCESS
    )
  )
  FAIL
  ;

  WHEN_BOTH(
    SUCCESS
    FORWARD_INT
    THEN(SUCCESS)
    FORWARD_INT_RETURN(SUCCESS),
    WHEN_BOTH(
      WHEN_BOTH(SUCCESS, SUCCESS),
      SUCCESS
    )
  )
  FAIL
  ;

  WHEN_BOTH(
    SUCCESS
    FORWARD_INT
    THEN(SUCCESS)
    FORWARD_INT_RETURN(SUCCESS),
    WHEN_BOTH(
      WHEN_BOTH(SUCCESS, SUCCESS),
      SUCCESS
    )
  )
  FAIL
  ;
}
#endif